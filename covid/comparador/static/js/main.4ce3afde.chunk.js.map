{"version":3,"sources":["state/index.js","components/CountrySelector.jsx","components/CountryComparing.jsx","App.js","serviceWorker.js","index.js"],"names":["AppContext","createContext","AppProvider","children","useState","information","setInformation","isoCountry","setIsoCountry","first","setFirst","second","setSecond","firstConfirmed","setFirstConfirmed","secondConfirmed","setSecondConfirmed","firstRecovered","setFirstRecovered","secondRecovered","setSecondRecovered","firstDeaths","setFirstDeaths","secondDeaths","setSecondDeaths","Provider","value","CountrySelector","useContext","countries","setCountries","countrySelected","setCountrySelected","results","setResults","loadCountriesList","a","fetch","response","json","country","Object","assign","Slug","Country","console","log","loadData","totalConfirmed","totalRecovered","totalDeaths","data","result","Confirmed","Recovered","Deaths","useEffect","className","onChange","event","countrySlug","target","defaultValue","length","map","index","ISO2","key","FullDate","Date","split","CountryComparing","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4ce3afde.chunk.js","sourcesContent":["import React, { createContext, useState } from \"react\";\n\nconst AppContext = createContext();\n\nfunction AppProvider({ children }) {\n\n  const [information, setInformation] = useState({});\n  const [isoCountry, setIsoCountry] = useState({});\n\n  const [first, setFirst] = useState(null);\n  const [second, setSecond] = useState(null);\n\n  const [firstConfirmed, setFirstConfirmed] = useState(0);\n  const [secondConfirmed, setSecondConfirmed] = useState(0);\n\n  const [firstRecovered, setFirstRecovered] = useState(0);\n  const [secondRecovered, setSecondRecovered] = useState(0);\n\n  const [firstDeaths, setFirstDeaths] = useState(0);\n  const [secondDeaths, setSecondDeaths] = useState(0);\n\n  return (\n    <AppContext.Provider\n      value={{\n        information, setInformation,\n        isoCountry, setIsoCountry,\n\n        first, setFirst,\n        second, setSecond,\n\n        firstConfirmed, setFirstConfirmed,\n        secondConfirmed, setSecondConfirmed,      \n\n        firstRecovered, setFirstRecovered,\n        secondRecovered, setSecondRecovered,\n\n        firstDeaths, setFirstDeaths,\n        secondDeaths, setSecondDeaths\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n}\n\nexport { AppProvider, AppContext };\n","import React, { useEffect, useState, useContext } from \"react\";\nimport { AppContext } from \"../state\";\n\nexport default function CountrySelector({ first = false }) {\n  const name = first ? \"first\" : \"second\";\n\n  const {\n    isoCountry,\n    setIsoCountry,\n    setFirst,\n    setSecond,\n    setFirstConfirmed,\n    setSecondConfirmed,\n    setFirstRecovered,\n    setSecondRecovered,\n    setFirstDeaths,\n    setSecondDeaths,\n  } = useContext(AppContext);\n\n  const [countries, setCountries] = useState([]);\n  const [countrySelected, setCountrySelected] = useState(null);\n  const [results, setResults] = useState([]);\n\n  const loadCountriesList = async () => {\n    try {\n      const response = await fetch(\"https://api.covid19api.com/countries\");\n      const countries = await response.json();\n      setCountries(countries);\n      for (let country of countries) {\n        setIsoCountry(\n          Object.assign(isoCountry, {}, { [country.Slug]: country.Country })\n        );\n      }\n    } catch (e) {\n      console.log(\"loadCountriesList -> e\", e);\n    }\n  };\n\n  const loadData = async () => {\n    if (countrySelected === null) return;\n\n    let totalConfirmed = 0;\n    let totalRecovered = 0;\n    let totalDeaths = 0;\n\n    try {\n      let data = await fetch(\n        `https://api.covid19api.com/total/country/${countrySelected}`\n      );\n\n      data = await data.json();\n      setResults(data);\n\n      for (let result of data) {\n        totalConfirmed = totalConfirmed + result.Confirmed;\n        totalRecovered = totalRecovered + result.Recovered;\n        totalDeaths = totalDeaths + result.Deaths;\n      }\n\n      if (first) {\n        setFirstConfirmed(totalConfirmed);\n        setFirstRecovered(totalRecovered);\n        setFirstDeaths(totalDeaths);\n      } else {\n        setSecondConfirmed(totalConfirmed);\n        setSecondRecovered(totalRecovered);\n        setSecondDeaths(totalDeaths);\n      }\n    } catch (e) {\n      console.log(\"loadCountriesList -> e\", e);\n    }\n  };\n\n  useEffect(() => {\n    loadCountriesList();\n  }, []);\n\n  useEffect(() => {\n    if (countrySelected === null) return;\n    loadData();\n  }, [countrySelected]);\n\n  return (\n    <>\n      <div className=\"flex border rounded-lg shadow-lg pt-3 pb-6\">\n        <div className=\"w-full\">\n          <div className=\"py-2 text-center text-2xl\">País</div>\n          <div className=\"py-2 px-8\">\n            <select\n              className=\"w-full p-2 border border-black h-8\"\n              onChange={(event) => {\n                const countrySlug = event.target.value;\n                setCountrySelected(countrySlug);\n                if (first) setFirst(isoCountry[countrySlug]);\n                else setSecond(isoCountry[countrySlug]);\n              }}\n            >\n              <option value=\"\" defaultValue>\n                Selecciona un país\n              </option>\n              {(countries.length &&\n                countries.map(({ Country, Slug, ISO2 }, index) => (\n                  <option value={Slug} key={index}>\n                    {Country} ({ISO2})\n                  </option>\n                ))) || <option value=\"\">Cargando Países</option>}\n            </select>\n          </div>\n          <div className=\"w-full mt-2\">\n            <div>\n              <table className=\"bg-blue-800 text-blue-200 w-full\">\n                <thead>\n                  <tr>\n                    <th className=\"py-3\">Fecha</th>\n                    <th>Recuperados</th>\n                    <th>Confirmados</th>\n                    <th>Muertos</th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-gray-300 text-gray-700\">\n                  {(results.length &&\n                    results.map((result, index) => {\n                      const FullDate = result.Date.split(\"T\")[0];\n                      const { Recovered, Confirmed, Deaths } = result;\n                      return (\n                        <tr\n                          className=\"text-center border-b border-gray-600 font-semibold\"\n                          key={index}\n                        >\n                          <td className=\"py-2\">{FullDate}</td>\n                          <td className=\"py-2\">{Recovered}</td>\n                          <td className=\"py-2\">{Confirmed}</td>\n                          <td className=\"py-2\">{Deaths}</td>\n                        </tr>\n                      );\n                    })) || <tr></tr>}\n                </tbody>\n              </table>\n              {!results.length && (\n                <div className=\"text-center\">Selecciona un país </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React, { useContext } from \"react\";\nimport { AppContext } from \"../state\";\n\nexport default function CountryComparing() {\n  const {\n    first,\n    second,\n    firstConfirmed,\n    secondConfirmed,\n    firstRecovered,\n    secondRecovered,\n    firstDeaths,\n    secondDeaths,\n  } = useContext(AppContext);\n\n  return (\n    <>\n      <div className=\"flex\">\n        <div className=\"w-full\">\n          <div className=\"px-2 text-center\">\n            <div className=\"border py-4 mb-2 rounded-lg\">\n              <div className=\"text-2xl\">Más confirmados</div>\n              <div className=\"flex justify-center py-3 font-light\">\n                <div className=\"mx-auto\">\n                  <div>{first || \"Seleccionar País\"}</div>\n                  <div>{firstConfirmed}</div>\n                </div>\n                <div className=\"mx-auto\">\n                  <div>{second || \"Seleccionar País\"}</div>\n                  <div>{secondConfirmed}</div>\n                </div>\n              </div>\n            </div>\n            <div className=\"border py-4 mb-2 rounded-lg\">\n              <div className=\"text-2xl\">Más recuperados</div>\n              <div className=\"flex justify-center py-3 font-light\">\n                <div className=\"mx-auto\">\n                  <div>{first || \"Seleccionar País\"}</div>\n                  <div>{firstRecovered}</div>\n                </div>\n                <div className=\"mx-auto\">\n                  <div>{second || \"Seleccionar País\"}</div>\n                  <div>{secondRecovered}</div>\n                </div>\n              </div>\n            </div>\n            <div className=\"border py-4 mb-2 rounded-lg\">\n              <div className=\"text-2xl\">Más muertos</div>\n              <div className=\"flex justify-center py-3 font-light\">\n                <div className=\"mx-auto\">\n                  <div>{first || \"Seleccionar País\"}</div>\n                  <div>{firstDeaths}</div>\n                </div>\n                <div className=\"mx-auto\">\n                  <div>{second || \"Seleccionar País\"}</div>\n                  <div>{secondDeaths}</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport CountrySelector from \"./components/CountrySelector\";\nimport CountryComparing from \"./components/CountryComparing\";\nimport { AppProvider } from \"./state\";\n\nfunction App() {\n  return (\n    <AppProvider>\n    <div className=\"App\">\n      <div className=\"p-2\">\n        <div className=\"text-2xl\">COVID-19 Dashboard</div>\n        <div className=\"flex w-full\">\n          <div className=\"flex-1\">\n            <CountrySelector first={true} />\n          </div>\n          <div className=\"flex-1\">\n            <CountryComparing />\n          </div>\n          <div className=\"flex-1\">\n            <CountrySelector first={false} />\n          </div>\n        </div>\n      </div>\n    </div>\n    </AppProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}